package dcos

import (
	"crypto/tls"
	"net"
	"net/http"
	"net/url"
	"os/user"
	"path/filepath"
	"time"

	"github.com/dcos/client-go/dcos/cosmos"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/client"
)

type Client struct {
	Cosmos *cosmos.Client
}

func NewClient() (*Client, error) {
	// Get current user.
	usr, err := user.Current()
	if err != nil {
		return nil, err
	}

	// Get attached DC/OS config for the current user.
	dcosDir := filepath.Join(usr.HomeDir, ".dcos")
	config, err := NewConfigManager(&ConfigManagerOpts{Dir: dcosDir}).Current()
	if err != nil {
		return nil, err
	}

	// Parse the core.dcos_url config key.
	baseURL, err := url.Parse(config.URL())
	if err != nil {
		return nil, err
	}

	// Create an Open API client for the base URL.
	baseClient := client.New(baseURL.Host, "/", []string{baseURL.Scheme})

	// Add Authorization header by default to requests.
	baseClient.DefaultAuthentication = client.APIKeyAuth("Authorization", "header", "token="+config.ACSToken())

	// Setup the transport with the appropriate TLS config and timeouts.
	baseClient.Transport = &http.Transport{

		// Allow http_proxy, https_proxy, and no_proxy.
		Proxy: http.ProxyFromEnvironment,

		DialContext: (&net.Dialer{
			// Set a 10 seconds timeout for the connection to be established.
			Timeout: 10 * time.Second,
		}).DialContext,

		// Set it to 10 seconds as well for the TLS handshake when using HTTPS.
		TLSHandshakeTimeout: 10 * time.Second,
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: config.TLS().Insecure,
			RootCAs:            config.TLS().RootCAs,
		},

		// The client will be dealing with a single host (the one in baseURL),
		// set max idle connections to 30 regardless of the host.
		MaxIdleConns:        30,
		MaxIdleConnsPerHost: 30,
	}

	// Add Cosmos related consumers and producers, can this be autogenerated in the Cosmos client instead?
	// Taken from https://github.com/mesosphere/protoss/blob/4335971fb48ae29c3caa45dd96ff50f99d3e8b0c/pkg/dcos/cosmos/client/cosmos_client_dcos_helper.go#L46-L58
	baseClient.Consumers["application/vnd.dcos.package.describe-response+json"] = baseClient.Consumers[runtime.JSONMime]
	baseClient.Producers["application/vnd.dcos.package.describe-request+json;charset=utf-8;version=v1"] = baseClient.Producers[runtime.JSONMime]

	return &Client{
		Cosmos: cosmos.New(baseClient, nil),
	}, nil
}
