// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSecretStorePathToSecret deletes a secret

Delete a secret.
*/
func (a *Client) DeleteSecretStorePathToSecret(params *DeleteSecretStorePathToSecretParams) (*DeleteSecretStorePathToSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecretStorePathToSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSecretStorePathToSecret",
		Method:             "DELETE",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSecretStorePathToSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSecretStorePathToSecretNoContent), nil

}

/*
GetSecretStorePathToSecret reads or list a secret from the store by its path

Read or list a secret from the store by its path.
*/
func (a *Client) GetSecretStorePathToSecret(params *GetSecretStorePathToSecretParams) (*GetSecretStorePathToSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretStorePathToSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecretStorePathToSecret",
		Method:             "GET",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecretStorePathToSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecretStorePathToSecretOK), nil

}

/*
PatchSecretStorePathToSecret updates secret

Update existing secret in the specified store.
*/
func (a *Client) PatchSecretStorePathToSecret(params *PatchSecretStorePathToSecretParams) (*PatchSecretStorePathToSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSecretStorePathToSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSecretStorePathToSecret",
		Method:             "PATCH",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSecretStorePathToSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSecretStorePathToSecretNoContent), nil

}

/*
PutSecretStorePathToSecret creates a secret in the store at the path

Create a secret in the store at the path.
*/
func (a *Client) PutSecretStorePathToSecret(params *PutSecretStorePathToSecretParams) (*PutSecretStorePathToSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecretStorePathToSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSecretStorePathToSecret",
		Method:             "PUT",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSecretStorePathToSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSecretStorePathToSecretCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
