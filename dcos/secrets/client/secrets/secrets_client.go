// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSecret creates a secret in the store at the path

Create a secret in the store at the path.
*/
func (a *Client) CreateSecret(params *CreateSecretParams) (*CreateSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-secret",
		Method:             "PUT",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSecretCreated), nil

}

/*
DeleteSecret deletes a secret

Delete a secret.
*/
func (a *Client) DeleteSecret(params *DeleteSecretParams) (*DeleteSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-secret",
		Method:             "DELETE",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSecretNoContent), nil

}

/*
GetSecret reads or list a secret from the store by its path

Read or list a secret from the store by its path.
*/
func (a *Client) GetSecret(params *GetSecretParams) (*GetSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-secret",
		Method:             "GET",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecretOK), nil

}

/*
UpdateSecret updates secret

Update existing secret in the specified store.
*/
func (a *Client) UpdateSecret(params *UpdateSecretParams) (*UpdateSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-secret",
		Method:             "PATCH",
		PathPattern:        "/secret/{store}/{path-to-secret}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSecretNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
