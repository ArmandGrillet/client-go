// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/dcos/client-go/dcos/secrets/models"
)

// GetSecretReader is a Reader for the GetSecret structure.
type GetSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSecretOK creates a GetSecretOK with default headers values
func NewGetSecretOK() *GetSecretOK {
	return &GetSecretOK{}
}

/*GetSecretOK handles this case with default header values.

Response body contains secret authorized content.
*/
type GetSecretOK struct {
	Payload *models.Secret
}

func (o *GetSecretOK) Error() string {
	return fmt.Sprintf("[GET /secret/{store}/{path-to-secret}][%d] getSecretOK  %+v", 200, o.Payload)
}

func (o *GetSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Secret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSecretBadRequest creates a GetSecretBadRequest with default headers values
func NewGetSecretBadRequest() *GetSecretBadRequest {
	return &GetSecretBadRequest{}
}

/*GetSecretBadRequest handles this case with default header values.

Unsupported Accept header.
*/
type GetSecretBadRequest struct {
}

func (o *GetSecretBadRequest) Error() string {
	return fmt.Sprintf("[GET /secret/{store}/{path-to-secret}][%d] getSecretBadRequest ", 400)
}

func (o *GetSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSecretForbidden creates a GetSecretForbidden with default headers values
func NewGetSecretForbidden() *GetSecretForbidden {
	return &GetSecretForbidden{}
}

/*GetSecretForbidden handles this case with default header values.

Forbidden.
*/
type GetSecretForbidden struct {
}

func (o *GetSecretForbidden) Error() string {
	return fmt.Sprintf("[GET /secret/{store}/{path-to-secret}][%d] getSecretForbidden ", 403)
}

func (o *GetSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSecretNotFound creates a GetSecretNotFound with default headers values
func NewGetSecretNotFound() *GetSecretNotFound {
	return &GetSecretNotFound{}
}

/*GetSecretNotFound handles this case with default header values.

Secret not found.
*/
type GetSecretNotFound struct {
}

func (o *GetSecretNotFound) Error() string {
	return fmt.Sprintf("[GET /secret/{store}/{path-to-secret}][%d] getSecretNotFound ", 404)
}

func (o *GetSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
