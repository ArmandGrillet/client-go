// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateSecretReader is a Reader for the UpdateSecret structure.
type UpdateSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewUpdateSecretNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewUpdateSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSecretNoContent creates a UpdateSecretNoContent with default headers values
func NewUpdateSecretNoContent() *UpdateSecretNoContent {
	return &UpdateSecretNoContent{}
}

/*UpdateSecretNoContent handles this case with default header values.

Secret updated.
*/
type UpdateSecretNoContent struct {
}

func (o *UpdateSecretNoContent) Error() string {
	return fmt.Sprintf("[PATCH /secret/{store}/{path-to-secret}][%d] updateSecretNoContent ", 204)
}

func (o *UpdateSecretNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSecretForbidden creates a UpdateSecretForbidden with default headers values
func NewUpdateSecretForbidden() *UpdateSecretForbidden {
	return &UpdateSecretForbidden{}
}

/*UpdateSecretForbidden handles this case with default header values.

Forbidden.
*/
type UpdateSecretForbidden struct {
}

func (o *UpdateSecretForbidden) Error() string {
	return fmt.Sprintf("[PATCH /secret/{store}/{path-to-secret}][%d] updateSecretForbidden ", 403)
}

func (o *UpdateSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSecretNotFound creates a UpdateSecretNotFound with default headers values
func NewUpdateSecretNotFound() *UpdateSecretNotFound {
	return &UpdateSecretNotFound{}
}

/*UpdateSecretNotFound handles this case with default header values.

Secret not found.
*/
type UpdateSecretNotFound struct {
}

func (o *UpdateSecretNotFound) Error() string {
	return fmt.Sprintf("[PATCH /secret/{store}/{path-to-secret}][%d] updateSecretNotFound ", 404)
}

func (o *UpdateSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
