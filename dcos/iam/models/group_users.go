// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupUsers group users
// swagger:model GroupUsers
type GroupUsers struct {

	// array
	Array []*GroupUsersArrayItems0 `json:"array"`
}

// Validate validates this group users
func (m *GroupUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArray(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupUsers) validateArray(formats strfmt.Registry) error {

	if swag.IsZero(m.Array) { // not required
		return nil
	}

	for i := 0; i < len(m.Array); i++ {
		if swag.IsZero(m.Array[i]) { // not required
			continue
		}

		if m.Array[i] != nil {
			if err := m.Array[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("array" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupUsers) UnmarshalBinary(b []byte) error {
	var res GroupUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GroupUsersArrayItems0 group users array items0
// swagger:model GroupUsersArrayItems0
type GroupUsersArrayItems0 struct {

	// membershipurl
	// Required: true
	Membershipurl *string `json:"membershipurl"`

	// user
	// Required: true
	User *User `json:"user"`
}

// Validate validates this group users array items0
func (m *GroupUsersArrayItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembershipurl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupUsersArrayItems0) validateMembershipurl(formats strfmt.Registry) error {

	if err := validate.Required("membershipurl", "body", m.Membershipurl); err != nil {
		return err
	}

	return nil
}

func (m *GroupUsersArrayItems0) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupUsersArrayItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupUsersArrayItems0) UnmarshalBinary(b []byte) error {
	var res GroupUsersArrayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
