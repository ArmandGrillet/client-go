// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPermissions user permissions
// swagger:model UserPermissions
type UserPermissions struct {

	// direct
	Direct []*UserPermissionsDirectItems0 `json:"direct"`

	// groups
	Groups []*UserPermissionsGroupsItems0 `json:"groups"`
}

// Validate validates this user permissions
func (m *UserPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissions) validateDirect(formats strfmt.Registry) error {

	if swag.IsZero(m.Direct) { // not required
		return nil
	}

	for i := 0; i < len(m.Direct); i++ {
		if swag.IsZero(m.Direct[i]) { // not required
			continue
		}

		if m.Direct[i] != nil {
			if err := m.Direct[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("direct" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissions) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissions) UnmarshalBinary(b []byte) error {
	var res UserPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserPermissionsDirectItems0 user permissions direct items0
// swagger:model UserPermissionsDirectItems0
type UserPermissionsDirectItems0 struct {

	// aclurl
	// Required: true
	Aclurl *string `json:"aclurl"`

	// actions
	// Required: true
	Actions []*Action `json:"actions"`

	// description
	// Required: true
	Description *string `json:"description"`

	// rid
	// Required: true
	Rid *string `json:"rid"`
}

// Validate validates this user permissions direct items0
func (m *UserPermissionsDirectItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAclurl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissionsDirectItems0) validateAclurl(formats strfmt.Registry) error {

	if err := validate.Required("aclurl", "body", m.Aclurl); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionsDirectItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionsDirectItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionsDirectItems0) validateRid(formats strfmt.Registry) error {

	if err := validate.Required("rid", "body", m.Rid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissionsDirectItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissionsDirectItems0) UnmarshalBinary(b []byte) error {
	var res UserPermissionsDirectItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserPermissionsGroupsItems0 user permissions groups items0
// swagger:model UserPermissionsGroupsItems0
type UserPermissionsGroupsItems0 struct {

	// aclurl
	// Required: true
	Aclurl *string `json:"aclurl"`

	// actions
	// Required: true
	Actions []*Action `json:"actions"`

	// description
	// Required: true
	Description *string `json:"description"`

	// gid
	// Required: true
	Gid *string `json:"gid"`

	// membershipurl
	// Required: true
	Membershipurl *string `json:"membershipurl"`

	// rid
	// Required: true
	Rid *string `json:"rid"`
}

// Validate validates this user permissions groups items0
func (m *UserPermissionsGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAclurl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembershipurl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermissionsGroupsItems0) validateAclurl(formats strfmt.Registry) error {

	if err := validate.Required("aclurl", "body", m.Aclurl); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionsGroupsItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPermissionsGroupsItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionsGroupsItems0) validateGid(formats strfmt.Registry) error {

	if err := validate.Required("gid", "body", m.Gid); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionsGroupsItems0) validateMembershipurl(formats strfmt.Registry) error {

	if err := validate.Required("membershipurl", "body", m.Membershipurl); err != nil {
		return err
	}

	return nil
}

func (m *UserPermissionsGroupsItems0) validateRid(formats strfmt.Registry) error {

	if err := validate.Required("rid", "body", m.Rid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermissionsGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermissionsGroupsItems0) UnmarshalBinary(b []byte) error {
	var res UserPermissionsGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
