// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SAMLProviderConfig s a m l provider config
// swagger:model SAMLProviderConfig
type SAMLProviderConfig struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// idp metadata
	// Required: true
	IdpMetadata *string `json:"idp_metadata"`

	// sp base url
	// Required: true
	SpBaseURL *string `json:"sp_base_url"`
}

// Validate validates this s a m l provider config
func (m *SAMLProviderConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdpMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpBaseURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SAMLProviderConfig) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SAMLProviderConfig) validateIdpMetadata(formats strfmt.Registry) error {

	if err := validate.Required("idp_metadata", "body", m.IdpMetadata); err != nil {
		return err
	}

	return nil
}

func (m *SAMLProviderConfig) validateSpBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("sp_base_url", "body", m.SpBaseURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SAMLProviderConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SAMLProviderConfig) UnmarshalBinary(b []byte) error {
	var res SAMLProviderConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
