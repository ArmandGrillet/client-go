// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/dcos/client-go/dcos/iam/models"
)

// NewPostLdapImportuserParams creates a new PostLdapImportuserParams object
// with the default values initialized.
func NewPostLdapImportuserParams() *PostLdapImportuserParams {
	var ()
	return &PostLdapImportuserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostLdapImportuserParamsWithTimeout creates a new PostLdapImportuserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostLdapImportuserParamsWithTimeout(timeout time.Duration) *PostLdapImportuserParams {
	var ()
	return &PostLdapImportuserParams{

		timeout: timeout,
	}
}

// NewPostLdapImportuserParamsWithContext creates a new PostLdapImportuserParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostLdapImportuserParamsWithContext(ctx context.Context) *PostLdapImportuserParams {
	var ()
	return &PostLdapImportuserParams{

		Context: ctx,
	}
}

// NewPostLdapImportuserParamsWithHTTPClient creates a new PostLdapImportuserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostLdapImportuserParamsWithHTTPClient(client *http.Client) *PostLdapImportuserParams {
	var ()
	return &PostLdapImportuserParams{
		HTTPClient: client,
	}
}

/*PostLdapImportuserParams contains all the parameters to send to the API endpoint
for the post ldap importuser operation typically these are written to a http.Request
*/
type PostLdapImportuserParams struct {

	/*LDAPUsername
	  A JSON object specifying the username (read: "login" or "user ID") of the user that should be imported. That string is equivalent to the `uid` the user is supposed to log in with after successful import. The exact meaning of this string depends on the configured LDAP authentication method.

	*/
	LDAPUsername *models.LDApimportUserObject

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post ldap importuser params
func (o *PostLdapImportuserParams) WithTimeout(timeout time.Duration) *PostLdapImportuserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post ldap importuser params
func (o *PostLdapImportuserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post ldap importuser params
func (o *PostLdapImportuserParams) WithContext(ctx context.Context) *PostLdapImportuserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post ldap importuser params
func (o *PostLdapImportuserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post ldap importuser params
func (o *PostLdapImportuserParams) WithHTTPClient(client *http.Client) *PostLdapImportuserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post ldap importuser params
func (o *PostLdapImportuserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLDAPUsername adds the lDAPUsername to the post ldap importuser params
func (o *PostLdapImportuserParams) WithLDAPUsername(lDAPUsername *models.LDApimportUserObject) *PostLdapImportuserParams {
	o.SetLDAPUsername(lDAPUsername)
	return o
}

// SetLDAPUsername adds the lDAPUsername to the post ldap importuser params
func (o *PostLdapImportuserParams) SetLDAPUsername(lDAPUsername *models.LDApimportUserObject) {
	o.LDAPUsername = lDAPUsername
}

// WriteToRequest writes these params to a swagger request
func (o *PostLdapImportuserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LDAPUsername != nil {
		if err := r.SetBodyParam(o.LDAPUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
