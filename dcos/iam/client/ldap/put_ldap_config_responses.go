// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PutLdapConfigReader is a Reader for the PutLdapConfig structure.
type PutLdapConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutLdapConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutLdapConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutLdapConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutLdapConfigOK creates a PutLdapConfigOK with default headers values
func NewPutLdapConfigOK() *PutLdapConfigOK {
	return &PutLdapConfigOK{}
}

/*PutLdapConfigOK handles this case with default header values.

Configuration has been persisted. Basic validation tests passed, but the directory service was not contacted. You're encouraged to now perform a basic feature check against the directory back-end with the newly set configuration by using the the config test endpoint.
*/
type PutLdapConfigOK struct {
}

func (o *PutLdapConfigOK) Error() string {
	return fmt.Sprintf("[PUT /ldap/config][%d] putLdapConfigOK ", 200)
}

func (o *PutLdapConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLdapConfigBadRequest creates a PutLdapConfigBadRequest with default headers values
func NewPutLdapConfigBadRequest() *PutLdapConfigBadRequest {
	return &PutLdapConfigBadRequest{}
}

/*PutLdapConfigBadRequest handles this case with default header values.

Various errors. If the configuration object itself is invalid, the custom error code `ERR_LDAP_CONFIG_INVALID` is set in the response and a description sheds light onto the problem specifics.
*/
type PutLdapConfigBadRequest struct {
}

func (o *PutLdapConfigBadRequest) Error() string {
	return fmt.Sprintf("[PUT /ldap/config][%d] putLdapConfigBadRequest ", 400)
}

func (o *PutLdapConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
