// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ldap API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ldap API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLdapConfig deletes current l d a p configuration

Delete current directory (LDAP) back-end configuration. This deactivates the LDAP authentication.
*/
func (a *Client) DeleteLdapConfig(params *DeleteLdapConfigParams) (*DeleteLdapConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLdapConfig",
		Method:             "DELETE",
		PathPattern:        "/ldap/config",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLdapConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLdapConfigNoContent), nil

}

/*
GetLdapConfig retrieves current l d a p configuration

Retrieve current directory (LDAP) back-end configuration.
*/
func (a *Client) GetLdapConfig(params *GetLdapConfigParams) (*GetLdapConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLdapConfig",
		Method:             "GET",
		PathPattern:        "/ldap/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapConfigOK), nil

}

/*
PostLdapConfigTest tests connection to the l d a p back end

Perform basic feature tests. Verify that the current directory (LDAP) configuration parameters allow for a successful connection to the directory back-end. For instance, this endpoint simulates the procedure for authentication via LDAP, but provides more useful feedback upon failure than the actual login endpoint.
*/
func (a *Client) PostLdapConfigTest(params *PostLdapConfigTestParams) (*PostLdapConfigTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLdapConfigTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLdapConfigTest",
		Method:             "POST",
		PathPattern:        "/ldap/config/test",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLdapConfigTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLdapConfigTestOK), nil

}

/*
PostLdapImportgroup imports an l d a p group

Attempt to import a group of users from the configured directory (LDAP) back-end. See docs/ldap.md for details on group import.
*/
func (a *Client) PostLdapImportgroup(params *PostLdapImportgroupParams) (*PostLdapImportgroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLdapImportgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLdapImportgroup",
		Method:             "POST",
		PathPattern:        "/ldap/importgroup",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLdapImportgroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLdapImportgroupCreated), nil

}

/*
PostLdapImportuser imports an l d a p user

Attempt to import a user from the configured directory (LDAP) back-end.
*/
func (a *Client) PostLdapImportuser(params *PostLdapImportuserParams) (*PostLdapImportuserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLdapImportuserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLdapImportuser",
		Method:             "POST",
		PathPattern:        "/ldap/importuser",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLdapImportuserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLdapImportuserCreated), nil

}

/*
PutLdapConfig sets new l d a p configuration

Set new directory (LDAP) back-end configuration. Replace current configuration, if existing.
*/
func (a *Client) PutLdapConfig(params *PutLdapConfigParams) (*PutLdapConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLdapConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLdapConfig",
		Method:             "PUT",
		PathPattern:        "/ldap/config",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutLdapConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLdapConfigOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
