// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/dcos/client-go/dcos/iam/models"
)

// NewPostLdapImportgroupParams creates a new PostLdapImportgroupParams object
// with the default values initialized.
func NewPostLdapImportgroupParams() *PostLdapImportgroupParams {
	var ()
	return &PostLdapImportgroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostLdapImportgroupParamsWithTimeout creates a new PostLdapImportgroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostLdapImportgroupParamsWithTimeout(timeout time.Duration) *PostLdapImportgroupParams {
	var ()
	return &PostLdapImportgroupParams{

		timeout: timeout,
	}
}

// NewPostLdapImportgroupParamsWithContext creates a new PostLdapImportgroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostLdapImportgroupParamsWithContext(ctx context.Context) *PostLdapImportgroupParams {
	var ()
	return &PostLdapImportgroupParams{

		Context: ctx,
	}
}

// NewPostLdapImportgroupParamsWithHTTPClient creates a new PostLdapImportgroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostLdapImportgroupParamsWithHTTPClient(client *http.Client) *PostLdapImportgroupParams {
	var ()
	return &PostLdapImportgroupParams{
		HTTPClient: client,
	}
}

/*PostLdapImportgroupParams contains all the parameters to send to the API endpoint
for the post ldap importgroup operation typically these are written to a http.Request
*/
type PostLdapImportgroupParams struct {

	/*LDAPGroupname
	  A JSON object specifying the name of the group to be imported. The meaning of the name depends on the group search settings.

	*/
	LDAPGroupname *models.LDApimportGroupObject

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post ldap importgroup params
func (o *PostLdapImportgroupParams) WithTimeout(timeout time.Duration) *PostLdapImportgroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post ldap importgroup params
func (o *PostLdapImportgroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post ldap importgroup params
func (o *PostLdapImportgroupParams) WithContext(ctx context.Context) *PostLdapImportgroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post ldap importgroup params
func (o *PostLdapImportgroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post ldap importgroup params
func (o *PostLdapImportgroupParams) WithHTTPClient(client *http.Client) *PostLdapImportgroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post ldap importgroup params
func (o *PostLdapImportgroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLDAPGroupname adds the lDAPGroupname to the post ldap importgroup params
func (o *PostLdapImportgroupParams) WithLDAPGroupname(lDAPGroupname *models.LDApimportGroupObject) *PostLdapImportgroupParams {
	o.SetLDAPGroupname(lDAPGroupname)
	return o
}

// SetLDAPGroupname adds the lDAPGroupname to the post ldap importgroup params
func (o *PostLdapImportgroupParams) SetLDAPGroupname(lDAPGroupname *models.LDApimportGroupObject) {
	o.LDAPGroupname = lDAPGroupname
}

// WriteToRequest writes these params to a swagger request
func (o *PostLdapImportgroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LDAPGroupname != nil {
		if err := r.SetBodyParam(o.LDAPGroupname); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
