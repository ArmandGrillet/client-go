// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAuthLoginParams creates a new GetAuthLoginParams object
// with the default values initialized.
func NewGetAuthLoginParams() *GetAuthLoginParams {
	var ()
	return &GetAuthLoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuthLoginParamsWithTimeout creates a new GetAuthLoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAuthLoginParamsWithTimeout(timeout time.Duration) *GetAuthLoginParams {
	var ()
	return &GetAuthLoginParams{

		timeout: timeout,
	}
}

// NewGetAuthLoginParamsWithContext creates a new GetAuthLoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAuthLoginParamsWithContext(ctx context.Context) *GetAuthLoginParams {
	var ()
	return &GetAuthLoginParams{

		Context: ctx,
	}
}

// NewGetAuthLoginParamsWithHTTPClient creates a new GetAuthLoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAuthLoginParamsWithHTTPClient(client *http.Client) *GetAuthLoginParams {
	var ()
	return &GetAuthLoginParams{
		HTTPClient: client,
	}
}

/*GetAuthLoginParams contains all the parameters to send to the API endpoint
for the get auth login operation typically these are written to a http.Request
*/
type GetAuthLoginParams struct {

	/*OidcProvider
	  OIDC provider ID

	*/
	OidcProvider *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get auth login params
func (o *GetAuthLoginParams) WithTimeout(timeout time.Duration) *GetAuthLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get auth login params
func (o *GetAuthLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get auth login params
func (o *GetAuthLoginParams) WithContext(ctx context.Context) *GetAuthLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get auth login params
func (o *GetAuthLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get auth login params
func (o *GetAuthLoginParams) WithHTTPClient(client *http.Client) *GetAuthLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get auth login params
func (o *GetAuthLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOidcProvider adds the oidcProvider to the get auth login params
func (o *GetAuthLoginParams) WithOidcProvider(oidcProvider *string) *GetAuthLoginParams {
	o.SetOidcProvider(oidcProvider)
	return o
}

// SetOidcProvider adds the oidcProvider to the get auth login params
func (o *GetAuthLoginParams) SetOidcProvider(oidcProvider *string) {
	o.OidcProvider = oidcProvider
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuthLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OidcProvider != nil {

		// query param oidc-provider
		var qrOidcProvider string
		if o.OidcProvider != nil {
			qrOidcProvider = *o.OidcProvider
		}
		qOidcProvider := qrOidcProvider
		if qOidcProvider != "" {
			if err := r.SetQueryParam("oidc-provider", qOidcProvider); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
