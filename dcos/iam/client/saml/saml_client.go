// Code generated by go-swagger; DO NOT EDIT.

package saml

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new saml API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saml API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAuthSamlProvidersProviderID deletes provider

Delete provider (disables authentication with that provider).
*/
func (a *Client) DeleteAuthSamlProvidersProviderID(params *DeleteAuthSamlProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthSamlProvidersProviderIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthSamlProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAuthSamlProvidersProviderID",
		Method:             "DELETE",
		PathPattern:        "/auth/saml/providers/{provider-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAuthSamlProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthSamlProvidersProviderIDNoContent), nil

}

/*
GetAuthSamlProviders gets an overview for the configured s a m l 2 0 providers

Get an overview for the configured SAML 2.0 providers. The response contains a JSON object, with each key being a SAML provider ID, and each value being the corresponding provider description string. This endpoint does not expose sensitive provider configuration details.
*/
func (a *Client) GetAuthSamlProviders(params *GetAuthSamlProvidersParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthSamlProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSamlProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthSamlProviders",
		Method:             "GET",
		PathPattern:        "/auth/saml/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthSamlProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthSamlProvidersOK), nil

}

/*
GetAuthSamlProvidersProviderID gets configuration for a specific s a m l provider

Get configuration for a specific SAML provider.
*/
func (a *Client) GetAuthSamlProvidersProviderID(params *GetAuthSamlProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthSamlProvidersProviderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSamlProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthSamlProvidersProviderID",
		Method:             "GET",
		PathPattern:        "/auth/saml/providers/{provider-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthSamlProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthSamlProvidersProviderIDOK), nil

}

/*
GetAuthSamlProvidersProviderIDAcsCallbackURL gets the authentication callback URL for this s p

The IAM acts as SAML service provider (SP). A SAML identity provider (IdP) usually requires to be configured with the Assertion Consumer Service (ACS) callback URL of the SP (which is where the IdP makes the end-user submit the authentication response).
*/
func (a *Client) GetAuthSamlProvidersProviderIDAcsCallbackURL(params *GetAuthSamlProvidersProviderIDAcsCallbackURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthSamlProvidersProviderIDAcsCallbackURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSamlProvidersProviderIDAcsCallbackURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthSamlProvidersProviderIDAcsCallbackURL",
		Method:             "GET",
		PathPattern:        "/auth/saml/providers/{provider-id}/acs-callback-url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthSamlProvidersProviderIDAcsCallbackURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthSamlProvidersProviderIDAcsCallbackURLOK), nil

}

/*
GetAuthSamlProvidersProviderIDSpMetadata gets s p metadata XML

The IAM acts as SAML service provider (SP). This endpoint provides the SP metadata as an XML document. Certain identity providers (IdPs) may want to directly consume this document.
*/
func (a *Client) GetAuthSamlProvidersProviderIDSpMetadata(params *GetAuthSamlProvidersProviderIDSpMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthSamlProvidersProviderIDSpMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSamlProvidersProviderIDSpMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthSamlProvidersProviderIDSpMetadata",
		Method:             "GET",
		PathPattern:        "/auth/saml/providers/{provider-id}/sp-metadata",
		ProducesMediaTypes: []string{"application/samlmetadata+xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthSamlProvidersProviderIDSpMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthSamlProvidersProviderIDSpMetadataOK), nil

}

/*
PatchAuthSamlProvidersProviderID updates s a m l provider config

Update config for existing SAML provider.
*/
func (a *Client) PatchAuthSamlProvidersProviderID(params *PatchAuthSamlProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAuthSamlProvidersProviderIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAuthSamlProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAuthSamlProvidersProviderID",
		Method:             "PATCH",
		PathPattern:        "/auth/saml/providers/{provider-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAuthSamlProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAuthSamlProvidersProviderIDNoContent), nil

}

/*
PostAuthSamlProvidersProviderIDAcsCallback thes s p a c s callback endpoint

The IAM acts as SAML service provider (SP). As part of the authentication flow, a SAML identity provider (IdP) makes the end-user submit an authentication response to this endpoint.
*/
func (a *Client) PostAuthSamlProvidersProviderIDAcsCallback(params *PostAuthSamlProvidersProviderIDAcsCallbackParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthSamlProvidersProviderIDAcsCallbackParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAuthSamlProvidersProviderIDAcsCallback",
		Method:             "POST",
		PathPattern:        "/auth/saml/providers/{provider-id}/acs-callback",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAuthSamlProvidersProviderIDAcsCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutAuthSamlProvidersProviderID configures a new s a m l provider

Set up a SAML provider with the ID as specified in the URL, and with the config as given by the JSON document in the request body.
*/
func (a *Client) PutAuthSamlProvidersProviderID(params *PutAuthSamlProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAuthSamlProvidersProviderIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAuthSamlProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAuthSamlProvidersProviderID",
		Method:             "PUT",
		PathPattern:        "/auth/saml/providers/{provider-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAuthSamlProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthSamlProvidersProviderIDCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
