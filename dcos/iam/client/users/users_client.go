// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUsersUID deletes account

Delete account.
*/
func (a *Client) DeleteUsersUID(params *DeleteUsersUIDParams) (*DeleteUsersUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersUID",
		Method:             "DELETE",
		PathPattern:        "/users/{uid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsersUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersUIDNoContent), nil

}

/*
GetUsers retrieves all regular user accounts or service user accounts

Retrieve `User` objects. By default the list consists of regular user accounts, only. Alternatively, service user accounts may be requested instead.
*/
func (a *Client) GetUsers(params *GetUsersParams) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil

}

/*
GetUsersUID gets single user object

Get specific `User` object.
*/
func (a *Client) GetUsersUID(params *GetUsersUIDParams) (*GetUsersUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUID",
		Method:             "GET",
		PathPattern:        "/users/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsersUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUIDOK), nil

}

/*
GetUsersUIDGroups retrieves groups the user is member of

Retrieve groups the user is member of.
*/
func (a *Client) GetUsersUIDGroups(params *GetUsersUIDGroupsParams) (*GetUsersUIDGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUIDGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUIDGroups",
		Method:             "GET",
		PathPattern:        "/users/{uid}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsersUIDGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUIDGroupsOK), nil

}

/*
GetUsersUIDPermissions retrieves permissions an account has

Retrieve the permissions for this account with direct permissions distinguished from those that are obtained through group membership.
*/
func (a *Client) GetUsersUIDPermissions(params *GetUsersUIDPermissionsParams) (*GetUsersUIDPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUIDPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUIDPermissions",
		Method:             "GET",
		PathPattern:        "/users/{uid}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsersUIDPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUIDPermissionsOK), nil

}

/*
PatchUsersUID updates user account

Update existing user account (meta data and/or password).
*/
func (a *Client) PatchUsersUID(params *PatchUsersUIDParams) (*PatchUsersUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchUsersUID",
		Method:             "PATCH",
		PathPattern:        "/users/{uid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchUsersUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchUsersUIDNoContent), nil

}

/*
PutUsersUID creates user account

Create user (uid in url, details incl. credentials in body).
*/
func (a *Client) PutUsersUID(params *PutUsersUIDParams) (*PutUsersUIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUsersUID",
		Method:             "PUT",
		PathPattern:        "/users/{uid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUsersUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUsersUIDCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
