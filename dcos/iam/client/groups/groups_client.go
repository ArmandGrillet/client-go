// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteGroupsGid deletes group

Delete group.
*/
func (a *Client) DeleteGroupsGid(params *DeleteGroupsGidParams) (*DeleteGroupsGidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupsGidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGroupsGid",
		Method:             "DELETE",
		PathPattern:        "/groups/{gid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGroupsGidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupsGidNoContent), nil

}

/*
DeleteGroupsGidUsersUID deletes user account from group

Delete user account from group.
*/
func (a *Client) DeleteGroupsGidUsersUID(params *DeleteGroupsGidUsersUIDParams) (*DeleteGroupsGidUsersUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupsGidUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGroupsGidUsersUID",
		Method:             "DELETE",
		PathPattern:        "/groups/{gid}/users/{uid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGroupsGidUsersUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupsGidUsersUIDNoContent), nil

}

/*
GetGroups retrieves all group objects

Retrieve array of `Group` objects.
*/
func (a *Client) GetGroups(params *GetGroupsParams) (*GetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGroups",
		Method:             "GET",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupsOK), nil

}

/*
GetGroupsGid gets single group object

Get specific `Group` object.
*/
func (a *Client) GetGroupsGid(params *GetGroupsGidParams) (*GetGroupsGidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsGidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGroupsGid",
		Method:             "GET",
		PathPattern:        "/groups/{gid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupsGidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupsGidOK), nil

}

/*
GetGroupsGidPermissions retrieves group permissions

Retrieve permissions of this group.
*/
func (a *Client) GetGroupsGidPermissions(params *GetGroupsGidPermissionsParams) (*GetGroupsGidPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsGidPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGroupsGidPermissions",
		Method:             "GET",
		PathPattern:        "/groups/{gid}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupsGidPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupsGidPermissionsOK), nil

}

/*
GetGroupsGidUsers retrieves members of a group

Retrieve users that are member of this group. Allows to query service accounts, defaults to list only user accounts.
*/
func (a *Client) GetGroupsGidUsers(params *GetGroupsGidUsersParams) (*GetGroupsGidUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsGidUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGroupsGidUsers",
		Method:             "GET",
		PathPattern:        "/groups/{gid}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupsGidUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupsGidUsersOK), nil

}

/*
PatchGroupsGid updates group

Update existing group (description).
*/
func (a *Client) PatchGroupsGid(params *PatchGroupsGidParams) (*PatchGroupsGidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchGroupsGidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchGroupsGid",
		Method:             "PATCH",
		PathPattern:        "/groups/{gid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchGroupsGidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchGroupsGidNoContent), nil

}

/*
PutGroupsGid creates a group

Create a group.
*/
func (a *Client) PutGroupsGid(params *PutGroupsGidParams) (*PutGroupsGidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGroupsGidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGroupsGid",
		Method:             "PUT",
		PathPattern:        "/groups/{gid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutGroupsGidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGroupsGidCreated), nil

}

/*
PutGroupsGidUsersUID adds account to group

Add account to group.
*/
func (a *Client) PutGroupsGidUsersUID(params *PutGroupsGidUsersUIDParams) (*PutGroupsGidUsersUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutGroupsGidUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutGroupsGidUsersUID",
		Method:             "PUT",
		PathPattern:        "/groups/{gid}/users/{uid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutGroupsGidUsersUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutGroupsGidUsersUIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
