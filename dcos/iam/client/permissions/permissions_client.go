// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new permissions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permissions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAclsRid deletes ACL for a certain resource

Delete ACL of resource with ID `rid`.
*/
func (a *Client) DeleteAclsRid(params *DeleteAclsRidParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAclsRidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAclsRidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAclsRid",
		Method:             "DELETE",
		PathPattern:        "/acls/{rid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAclsRidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAclsRidNoContent), nil

}

/*
DeleteAclsRidGroupsGid forbids all actions of given group to given resource

Forbid all actions of given group to given resource.
*/
func (a *Client) DeleteAclsRidGroupsGid(params *DeleteAclsRidGroupsGidParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAclsRidGroupsGidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAclsRidGroupsGidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAclsRidGroupsGid",
		Method:             "DELETE",
		PathPattern:        "/acls/{rid}/groups/{gid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAclsRidGroupsGidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAclsRidGroupsGidNoContent), nil

}

/*
DeleteAclsRidGroupsGidAction forbids single action for given resource and group

Forbid single action for given resource and group.
*/
func (a *Client) DeleteAclsRidGroupsGidAction(params *DeleteAclsRidGroupsGidActionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAclsRidGroupsGidActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAclsRidGroupsGidActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAclsRidGroupsGidAction",
		Method:             "DELETE",
		PathPattern:        "/acls/{rid}/groups/{gid}/{action}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAclsRidGroupsGidActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAclsRidGroupsGidActionNoContent), nil

}

/*
DeleteAclsRidUsersUID forbids all actions of given account to given resource

Forbid all actions of given account to given resource.
*/
func (a *Client) DeleteAclsRidUsersUID(params *DeleteAclsRidUsersUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAclsRidUsersUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAclsRidUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAclsRidUsersUID",
		Method:             "DELETE",
		PathPattern:        "/acls/{rid}/users/{uid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAclsRidUsersUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAclsRidUsersUIDNoContent), nil

}

/*
DeleteAclsRidUsersUIDAction forbids single action for given account and resource

Forbid single action for given account and resource.
*/
func (a *Client) DeleteAclsRidUsersUIDAction(params *DeleteAclsRidUsersUIDActionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAclsRidUsersUIDActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAclsRidUsersUIDActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAclsRidUsersUIDAction",
		Method:             "DELETE",
		PathPattern:        "/acls/{rid}/users/{uid}/{action}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAclsRidUsersUIDActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAclsRidUsersUIDActionNoContent), nil

}

/*
GetAcls retrieves all ACL objects

Get array of `ACL` objects.
*/
func (a *Client) GetAcls(params *GetAclsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcls",
		Method:             "GET",
		PathPattern:        "/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsOK), nil

}

/*
GetAclsRid retrieves ACL for a certain resource

Retrieve single `ACL` object, for a specific resource.
*/
func (a *Client) GetAclsRid(params *GetAclsRidParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsRidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsRidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAclsRid",
		Method:             "GET",
		PathPattern:        "/acls/{rid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsRidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsRidOK), nil

}

/*
GetAclsRidGroupsGid gets allowed actions for given resource and group

Get allowed actions for given resource and group.
*/
func (a *Client) GetAclsRidGroupsGid(params *GetAclsRidGroupsGidParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsRidGroupsGidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsRidGroupsGidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAclsRidGroupsGid",
		Method:             "GET",
		PathPattern:        "/acls/{rid}/groups/{gid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsRidGroupsGidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsRidGroupsGidOK), nil

}

/*
GetAclsRidGroupsGidAction queries whether action is allowed or not

Query whether action is allowed or not.
*/
func (a *Client) GetAclsRidGroupsGidAction(params *GetAclsRidGroupsGidActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsRidGroupsGidActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsRidGroupsGidActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAclsRidGroupsGidAction",
		Method:             "GET",
		PathPattern:        "/acls/{rid}/groups/{gid}/{action}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsRidGroupsGidActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsRidGroupsGidActionOK), nil

}

/*
GetAclsRidPermissions retrieves all permissions for resource

Retrieve all permissions that are set for a specific resource.
*/
func (a *Client) GetAclsRidPermissions(params *GetAclsRidPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsRidPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsRidPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAclsRidPermissions",
		Method:             "GET",
		PathPattern:        "/acls/{rid}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsRidPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsRidPermissionsOK), nil

}

/*
GetAclsRidUsersUID gets allowed actions for given resource and user

Get allowed actions for given resource and user.
*/
func (a *Client) GetAclsRidUsersUID(params *GetAclsRidUsersUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsRidUsersUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsRidUsersUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAclsRidUsersUID",
		Method:             "GET",
		PathPattern:        "/acls/{rid}/users/{uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsRidUsersUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsRidUsersUIDOK), nil

}

/*
GetAclsRidUsersUIDAction queries whether action is allowed or not

Query whether action is allowed or not.
*/
func (a *Client) GetAclsRidUsersUIDAction(params *GetAclsRidUsersUIDActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAclsRidUsersUIDActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAclsRidUsersUIDActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAclsRidUsersUIDAction",
		Method:             "GET",
		PathPattern:        "/acls/{rid}/users/{uid}/{action}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAclsRidUsersUIDActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAclsRidUsersUIDActionOK), nil

}

/*
PatchAclsRid updates ACL for a certain resource

Update ACL for resource with ID `rid`.
*/
func (a *Client) PatchAclsRid(params *PatchAclsRidParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAclsRidNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAclsRidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAclsRid",
		Method:             "PATCH",
		PathPattern:        "/acls/{rid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAclsRidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAclsRidNoContent), nil

}

/*
PutAclsRid creates ACL for a certain resource

Create new ACL for resource with ID `rid` (description in body, no permissions by default).
*/
func (a *Client) PutAclsRid(params *PutAclsRidParams, authInfo runtime.ClientAuthInfoWriter) (*PutAclsRidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAclsRidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAclsRid",
		Method:             "PUT",
		PathPattern:        "/acls/{rid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAclsRidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAclsRidCreated), nil

}

/*
PutAclsRidGroupsGidAction permits single action for given resource and group

Permit single action for given resource and group.
*/
func (a *Client) PutAclsRidGroupsGidAction(params *PutAclsRidGroupsGidActionParams, authInfo runtime.ClientAuthInfoWriter) (*PutAclsRidGroupsGidActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAclsRidGroupsGidActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAclsRidGroupsGidAction",
		Method:             "PUT",
		PathPattern:        "/acls/{rid}/groups/{gid}/{action}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAclsRidGroupsGidActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAclsRidGroupsGidActionNoContent), nil

}

/*
PutAclsRidUsersUIDAction permits single action for given account and resource

Permit single action for given account and resource.
*/
func (a *Client) PutAclsRidUsersUIDAction(params *PutAclsRidUsersUIDActionParams, authInfo runtime.ClientAuthInfoWriter) (*PutAclsRidUsersUIDActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAclsRidUsersUIDActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAclsRidUsersUIDAction",
		Method:             "PUT",
		PathPattern:        "/acls/{rid}/users/{uid}/{action}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAclsRidUsersUIDActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAclsRidUsersUIDActionNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
