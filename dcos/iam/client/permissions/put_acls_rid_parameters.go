// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/dcos/client-go/dcos/iam/models"
)

// NewPutAclsRidParams creates a new PutAclsRidParams object
// with the default values initialized.
func NewPutAclsRidParams() *PutAclsRidParams {
	var ()
	return &PutAclsRidParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutAclsRidParamsWithTimeout creates a new PutAclsRidParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutAclsRidParamsWithTimeout(timeout time.Duration) *PutAclsRidParams {
	var ()
	return &PutAclsRidParams{

		timeout: timeout,
	}
}

// NewPutAclsRidParamsWithContext creates a new PutAclsRidParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutAclsRidParamsWithContext(ctx context.Context) *PutAclsRidParams {
	var ()
	return &PutAclsRidParams{

		Context: ctx,
	}
}

// NewPutAclsRidParamsWithHTTPClient creates a new PutAclsRidParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutAclsRidParamsWithHTTPClient(client *http.Client) *PutAclsRidParams {
	var ()
	return &PutAclsRidParams{
		HTTPClient: client,
	}
}

/*PutAclsRidParams contains all the parameters to send to the API endpoint
for the put acls rid operation typically these are written to a http.Request
*/
type PutAclsRidParams struct {

	/*ACL*/
	ACL *models.ACLCreate
	/*Rid
	  The ID of the resource for which the ACL should be created.

	*/
	Rid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put acls rid params
func (o *PutAclsRidParams) WithTimeout(timeout time.Duration) *PutAclsRidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put acls rid params
func (o *PutAclsRidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put acls rid params
func (o *PutAclsRidParams) WithContext(ctx context.Context) *PutAclsRidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put acls rid params
func (o *PutAclsRidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put acls rid params
func (o *PutAclsRidParams) WithHTTPClient(client *http.Client) *PutAclsRidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put acls rid params
func (o *PutAclsRidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithACL adds the acl to the put acls rid params
func (o *PutAclsRidParams) WithACL(acl *models.ACLCreate) *PutAclsRidParams {
	o.SetACL(acl)
	return o
}

// SetACL adds the acl to the put acls rid params
func (o *PutAclsRidParams) SetACL(acl *models.ACLCreate) {
	o.ACL = acl
}

// WithRid adds the rid to the put acls rid params
func (o *PutAclsRidParams) WithRid(rid string) *PutAclsRidParams {
	o.SetRid(rid)
	return o
}

// SetRid adds the rid to the put acls rid params
func (o *PutAclsRidParams) SetRid(rid string) {
	o.Rid = rid
}

// WriteToRequest writes these params to a swagger request
func (o *PutAclsRidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ACL != nil {
		if err := r.SetBodyParam(o.ACL); err != nil {
			return err
		}
	}

	// path param rid
	if err := r.SetPathParam("rid", o.Rid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
