// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new oidc API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for oidc API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAuthOidcProvidersProviderID deletes provider

Delete provider (disables authentication with that provider).
*/
func (a *Client) DeleteAuthOidcProvidersProviderID(params *DeleteAuthOidcProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthOidcProvidersProviderIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthOidcProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAuthOidcProvidersProviderID",
		Method:             "DELETE",
		PathPattern:        "/auth/oidc/providers/{provider-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAuthOidcProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthOidcProvidersProviderIDNoContent), nil

}

/*
GetAuthOidcCallback opens ID connect callback URL

After successfully logging in to an OpenID Connect identity provider, the end-user is being redirected back to the IAM via this callback URL. API consumers are not required to explicitly interact with this endpoint. This URL usually needs to be handed over to an OpenID Connect provider (often called "redirect" or "callback" URL).
*/
func (a *Client) GetAuthOidcCallback(params *GetAuthOidcCallbackParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthOidcCallbackParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthOidcCallback",
		Method:             "GET",
		PathPattern:        "/auth/oidc/callback",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthOidcCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAuthOidcProviders gets an overview for the configured o ID c providers

Get an overview for the configured OIDC providers. The response contains a JSON object, with each key being an OIDC provider ID, and each value being the corresponding provider description string. This endpoint does not expose sensitive provider configuration details.
*/
func (a *Client) GetAuthOidcProviders(params *GetAuthOidcProvidersParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthOidcProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthOidcProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthOidcProviders",
		Method:             "GET",
		PathPattern:        "/auth/oidc/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthOidcProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthOidcProvidersOK), nil

}

/*
GetAuthOidcProvidersProviderID gets configuration for a specific provider

Get configuration for a specific provider.
*/
func (a *Client) GetAuthOidcProvidersProviderID(params *GetAuthOidcProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthOidcProvidersProviderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthOidcProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthOidcProvidersProviderID",
		Method:             "GET",
		PathPattern:        "/auth/oidc/providers/{provider-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuthOidcProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthOidcProvidersProviderIDOK), nil

}

/*
PatchAuthOidcProvidersProviderID updates o ID c provider config

Update config for existing OIDC provider.
*/
func (a *Client) PatchAuthOidcProvidersProviderID(params *PatchAuthOidcProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAuthOidcProvidersProviderIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAuthOidcProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAuthOidcProvidersProviderID",
		Method:             "PATCH",
		PathPattern:        "/auth/oidc/providers/{provider-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAuthOidcProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAuthOidcProvidersProviderIDNoContent), nil

}

/*
PutAuthOidcProvidersProviderID configures a new o ID c provider

Set up OIDC provider with the ID as specified in the URL, and with the config as specified via JSON in the request body.
*/
func (a *Client) PutAuthOidcProvidersProviderID(params *PutAuthOidcProvidersProviderIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAuthOidcProvidersProviderIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAuthOidcProvidersProviderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAuthOidcProvidersProviderID",
		Method:             "PUT",
		PathPattern:        "/auth/oidc/providers/{provider-id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAuthOidcProvidersProviderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAuthOidcProvidersProviderIDCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
