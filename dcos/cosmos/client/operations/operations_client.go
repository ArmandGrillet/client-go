// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DCOSSystemHealth DC/OS system health.
*/
func (a *Client) DCOSSystemHealth(params *DCOSSystemHealthParams) (*DCOSSystemHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDCOSSystemHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dcos-system-health",
		Method:             "GET",
		PathPattern:        "/system/health/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DCOSSystemHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DCOSSystemHealthOK), nil

}

/*
DCOSSystemNodes DC/OS nodes.
*/
func (a *Client) DCOSSystemNodes(params *DCOSSystemNodesParams) (*DCOSSystemNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDCOSSystemNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "dcos-system-nodes",
		Method:             "GET",
		PathPattern:        "/system/health/v1/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DCOSSystemNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DCOSSystemNodesOK), nil

}

/*
HealthchechService Healthcheck service.
*/
func (a *Client) HealthchechService(params *HealthchechServiceParams) (*HealthchechServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthchechServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "healthchech-service",
		Method:             "GET",
		PathPattern:        "/service/{appId}/v1/health",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HealthchechServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HealthchechServiceOK), nil

}

/*
KubernetesAuthData Kuberentes Auth Data
*/
func (a *Client) KubernetesAuthData(params *KubernetesAuthDataParams) (*KubernetesAuthDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKubernetesAuthDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "kubernetes-auth-data",
		Method:             "GET",
		PathPattern:        "/service/{appId}/v1/auth/data",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KubernetesAuthDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KubernetesAuthDataOK), nil

}

/*
PackageDescribe Show information about the package, including the required resources and configuration to start the service, and command line extensions that are included with the package.
*/
func (a *Client) PackageDescribe(params *PackageDescribeParams) (*PackageDescribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageDescribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "package-describe",
		Method:             "POST",
		PathPattern:        "/package/describe",
		ProducesMediaTypes: []string{"application/vnd.dcos.package.describe-response+json;charset=utf-8;version=v3"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.package.describe-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageDescribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PackageDescribeOK), nil

}

/*
PackageInstall Runs a service from a Universe package.
*/
func (a *Client) PackageInstall(params *PackageInstallParams) (*PackageInstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageInstallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "package-install",
		Method:             "POST",
		PathPattern:        "/package/install",
		ProducesMediaTypes: []string{"application/vnd.dcos.package.install-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.package.install-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageInstallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PackageInstallOK), nil

}

/*
PackageRepositoryAdd Adds a package repository (for example Universe) for use by DC/OS. To add a package
repository to the beginning of the list set the index to zero (0). To add a package
repository to the end of the list do not specify an index.

*/
func (a *Client) PackageRepositoryAdd(params *PackageRepositoryAddParams) (*PackageRepositoryAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageRepositoryAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "package-repository-add",
		Method:             "POST",
		PathPattern:        "/package/repository/add",
		ProducesMediaTypes: []string{"application/vnd.dcos.package.repository.add-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.package.repository.add-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageRepositoryAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PackageRepositoryAddOK), nil

}

/*
PackageRepositoryDelete Deletes a package repository (for example Universe) from DC/OS.
*/
func (a *Client) PackageRepositoryDelete(params *PackageRepositoryDeleteParams) (*PackageRepositoryDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageRepositoryDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "package-repository-delete",
		Method:             "POST",
		PathPattern:        "/package/repository/delete",
		ProducesMediaTypes: []string{"application/vnd.dcos.package.repository.delete-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.package.repository.delete-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageRepositoryDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PackageRepositoryDeleteOK), nil

}

/*
PackageSearch Lists all matching packages in the repository given a partial pattern.
The character \'\*\' can be used to match any number of characters.

*/
func (a *Client) PackageSearch(params *PackageSearchParams) (*PackageSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "package-search",
		Method:             "POST",
		PathPattern:        "/package/search",
		ProducesMediaTypes: []string{"application/vnd.dcos.package.search-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.package.search-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PackageSearchOK), nil

}

/*
PackageUninstall package uninstall API
*/
func (a *Client) PackageUninstall(params *PackageUninstallParams) (*PackageUninstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPackageUninstallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "package-uninstall",
		Method:             "POST",
		PathPattern:        "/package/uninstall",
		ProducesMediaTypes: []string{"application/vnd.dcos.package.uninstall-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.package.uninstall-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PackageUninstallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PackageUninstallOK), nil

}

/*
ServiceDescribe Describes a DC/OS Service
*/
func (a *Client) ServiceDescribe(params *ServiceDescribeParams) (*ServiceDescribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDescribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service-describe",
		Method:             "POST",
		PathPattern:        "/cosmos/service/describe",
		ProducesMediaTypes: []string{"application/vnd.dcos.service.describe-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.service.describe-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceDescribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceDescribeOK), nil

}

/*
ServicePlan Service plan.
*/
func (a *Client) ServicePlan(params *ServicePlanParams) (*ServicePlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServicePlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service-plan",
		Method:             "GET",
		PathPattern:        "/service/{appId}/v1/plans/{plan}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServicePlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServicePlanOK), nil

}

/*
ServiceUpdate Runs a service update.
*/
func (a *Client) ServiceUpdate(params *ServiceUpdateParams) (*ServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service-update",
		Method:             "POST",
		PathPattern:        "/cosmos/service/update",
		ProducesMediaTypes: []string{"application/vnd.dcos.service.update-response+json;charset=utf-8;version=v1"},
		ConsumesMediaTypes: []string{"application/vnd.dcos.service.update-request+json;charset=utf-8;version=v1"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
