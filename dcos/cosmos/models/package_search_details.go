// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageSearchDetails package search details
// swagger:model packageSearchDetails
type PackageSearchDetails struct {

	// current version
	// Required: true
	CurrentVersion *string `json:"currentVersion"`

	// description
	// Required: true
	Description *string `json:"description"`

	// framework
	// Required: true
	Framework *bool `json:"framework"`

	// images
	Images *Images `json:"images,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// selected
	Selected bool `json:"selected,omitempty"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// versions
	// Required: true
	Versions []string `json:"versions"`
}

// Validate validates this package search details
func (m *PackageSearchDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageSearchDetails) validateCurrentVersion(formats strfmt.Registry) error {

	if err := validate.Required("currentVersion", "body", m.CurrentVersion); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchDetails) validateFramework(formats strfmt.Registry) error {

	if err := validate.Required("framework", "body", m.Framework); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchDetails) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	if m.Images != nil {
		if err := m.Images.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *PackageSearchDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PackageSearchDetails) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.Pattern("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i]), `^[^\s]+$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *PackageSearchDetails) validateVersions(formats strfmt.Registry) error {

	if err := validate.Required("versions", "body", m.Versions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageSearchDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageSearchDetails) UnmarshalBinary(b []byte) error {
	var res PackageSearchDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
